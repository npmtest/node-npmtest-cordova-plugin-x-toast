{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-toast/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_x_toast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-toast/lib.npmtest_cordova_plugin_x_toast.js":"/* istanbul instrument in package npmtest_cordova_plugin_x_toast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_x_toast = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_x_toast = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-toast/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-x-toast && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_x_toast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_x_toast\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_x_toast.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_x_toast.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_x_toast.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_x_toast.__dirname + '/lib.npmtest_cordova_plugin_x_toast.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-toast/node_modules/cordova-plugin-x-toast/www/Toast.js":"function Toast() {\n}\n\nToast.prototype.optionsBuilder = function () {\n\n  // defaults\n  var message = null;\n  var duration = \"short\";\n  var position = \"center\";\n  var addPixelsY = 0;\n\n  return {\n    withMessage: function(m) {\n      message = m.toString();\n      return this;\n    },\n\n    withDuration: function(d) {\n      duration = d.toString();\n      return this;\n    },\n\n    withPosition: function(p) {\n      position = p;\n      return this;\n    },\n\n    withAddPixelsY: function(y) {\n      addPixelsY = y;\n      return this;\n    },\n\n    build: function() {\n      return {\n        message: message,\n        duration: duration,\n        position: position,\n        addPixelsY: addPixelsY\n      };\n    }\n  };\n};\n\n\nToast.prototype.showWithOptions = function (options, successCallback, errorCallback) {\n  options.duration = (options.duration === undefined ? 'long' : options.duration.toString());\n  options.message = options.message.toString();\n  cordova.exec(successCallback, errorCallback, \"Toast\", \"show\", [options]);\n};\n\nToast.prototype.show = function (message, duration, position, successCallback, errorCallback) {\n  this.showWithOptions(\n      this.optionsBuilder()\n          .withMessage(message)\n          .withDuration(duration)\n          .withPosition(position)\n          .build(),\n      successCallback,\n      errorCallback);\n};\n\nToast.prototype.showShortTop = function (message, successCallback, errorCallback) {\n  this.show(message, \"short\", \"top\", successCallback, errorCallback);\n};\n\nToast.prototype.showShortCenter = function (message, successCallback, errorCallback) {\n  this.show(message, \"short\", \"center\", successCallback, errorCallback);\n};\n\nToast.prototype.showShortBottom = function (message, successCallback, errorCallback) {\n  this.show(message, \"short\", \"bottom\", successCallback, errorCallback);\n};\n\nToast.prototype.showLongTop = function (message, successCallback, errorCallback) {\n  this.show(message, \"long\", \"top\", successCallback, errorCallback);\n};\n\nToast.prototype.showLongCenter = function (message, successCallback, errorCallback) {\n  this.show(message, \"long\", \"center\", successCallback, errorCallback);\n};\n\nToast.prototype.showLongBottom = function (message, successCallback, errorCallback) {\n  this.show(message, \"long\", \"bottom\", successCallback, errorCallback);\n};\n\nToast.prototype.hide = function (successCallback, errorCallback) {\n  cordova.exec(successCallback, errorCallback, \"Toast\", \"hide\", []);\n};\n\nToast.install = function () {\n  if (!window.plugins) {\n    window.plugins = {};\n  }\n\n  window.plugins.toast = new Toast();\n  return window.plugins.toast;\n};\n\ncordova.addConstructor(Toast.install);","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-toast/node_modules/cordova-plugin-x-toast/src/blackberry10/index.js":"var toast,\n\tresultObjs = {},\n\tthreadCallback = null,\n   _utils = require(\"../../lib/utils\");\n\nmodule.exports = {\n\n\tshow: function (success, fail, args, env) {\n\t\tvar result = new PluginResult(args, env);\n\t\tresultObjs[result.callbackId] = result;\n\t\t\n\t\tvar message = JSON.parse(decodeURIComponent(args[0])),\n\t\tduration = JSON.parse(decodeURIComponent(args[1])),\n\t\tposition = JSON.parse(decodeURIComponent(args[2]));\n\t\t\n\t\ttoast.getInstance().show(result.callbackId, {message:message, duration:duration, position:position});\n\t}\n};\n\n///////////////////////////////////////////////////////////////////\n// JavaScript wrapper for JNEXT plugin for connection\n///////////////////////////////////////////////////////////////////\n\nJNEXT.Toast = function () {\n\tvar self = this,\n\t\thasInstance = false;\n\n\tself.getId = function () {\n\t\treturn self.m_id;\n\t};\n\n\tself.init = function () {\n\t\tif (!JNEXT.require(\"libToast\")) {\n\t\t\treturn false;\n\t\t}\n\n\t\tself.m_id = JNEXT.createObject(\"libToast.Toast_JS\");\n\n\t\tif (self.m_id === \"\") {\n\t\t\treturn false;\n\t\t}\n\n\t\tJNEXT.registerEvents(self);\n\t};\n\n\t// calls into InvokeMethod(string command) in Toast_JS.cpp\n\tself.show = function (callbackId, input) {\n\t\treturn JNEXT.invoke(self.m_id, \"show \" + callbackId + \" \" + JSON.stringify(input));\n\t};\n\n\t// Fired by the Event framework (used by asynchronous callbacks)\n\tself.onEvent = function (strData) {\n\t\tvar arData = strData.split(\" \"),\n\t\t\tcallbackId = arData[0],\n\t\t\tresult = resultObjs[callbackId],\n\t\t\tdata = arData.slice(1, arData.length).join(\" \");\n\n\t\tif (result) {\n\t\t\tif (callbackId != threadCallback) {\n\t\t\t\tresult.callbackOk(data, false);\n\t\t\t\tdelete resultObjs[callbackId];\n\t\t\t} else {\n\t\t\t\tresult.callbackOk(data, true);\n\t\t\t}\n\t\t}\n\t};\n\n\t// ************************\n\t// End of methods to edit\n\t// ************************\n\tself.m_id = \"\";\n\n\tself.getInstance = function () {\n\t\tif (!hasInstance) {\n\t\t\thasInstance = true;\n\t\t\tself.init();\n\t\t}\n\t\treturn self;\n\t};\n\n};\n\ntoast = new JNEXT.Toast();\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-toast/node_modules/cordova-plugin-x-toast/src/windows/toastProxy.js":"/**\n * @author Piotr Smolarski <ph0ndragxdev@gmail.com>\n */\nvar toastProxy = {\n\n    lastDisplayedNotification: null,\n\n    show: function(successCallback, errorCallback, options) {\n        var notifications = Windows.UI.Notifications;\n\n        var template = notifications.ToastTemplateType.ToastText01;\n        var toastXml = notifications.ToastNotificationManager.getTemplateContent(template);\n\n        var toastTextElements = toastXml.getElementsByTagName(\"text\");\n        toastTextElements[0].appendChild(toastXml.createTextNode(options[0].message));\n\n        var toastNode = toastXml.selectSingleNode(\"/toast\");\n        toastNode.setAttribute(\"duration\", options[0].duration);\n\n        var toast = new notifications.ToastNotification(toastXml);\n\n        toast.onactivated = function (event) {\n            toastProxy.lastDisplayedNotification = null;\n            successCallback({\n                event: \"touch\",\n                message: options[0].message,\n                data: options[0].data\n            });\n        };\n\n        toast.ondismissed = function (event) {\n            toastProxy.lastDisplayedNotification = null;\n            successCallback({\n                event: \"hide\",\n                message: options[0].message,\n                data: options[0].data\n            });\n        };\n\n        toast.onfailed = function(err) {\n            toastProxy.lastDisplayedNotification = null;\n            errorCallback(err);\n        };\n\n        notifications.ToastNotificationManager.createToastNotifier().show(toast);\n    },\n\n    hide: function() {\n        if (this.lastDisplayedNotification !== null) {\n            notifications.ToastNotificationManager.createToastNotifier().hide(toast);\n            this.lastDisplayedNotification = null;\n        }\n    }\n};\n\ncordova.commandProxy.add(\"Toast\", toastProxy);\n"}